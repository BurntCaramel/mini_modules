<script src="https://unpkg.com/monaco-editor@latest/min/vs/loader.js"></script>

<script type="module">
require.config({
  paths: {
    'vs': 'https://unpkg.com/monaco-editor@latest/min/vs'
  }
});

const proxy = URL.createObjectURL(new Blob([`
  self.MonacoEnvironment = {
    baseUrl: 'https://unpkg.com/monaco-editor@latest/min/'
  };
  importScripts('https://unpkg.com/monaco-editor@latest/min/vs/base/worker/workerMain.js');
`], { type: 'text/javascript' }));

window.MonacoEnvironment = { getWorkerUrl: () => proxy };

//const theme = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches ? 'vs-dark' : undefined;
const theme = 'vs-dark';

let value = ``;

require(["vs/editor/editor.main"], function () {
  const typescript = monaco.languages.typescript;
  for (const lang of [typescript.typescriptDefaults, typescript.javascriptDefaults]) {
    lang.setCompilerOptions({
      noSemanticValidation: true,
      noSyntaxValidation: false
    });
    lang.setCompilerOptions({
      target: monaco.languages.typescript.ScriptTarget.ESNext,
      allowNonTsExtensions: true,
      allowJs: true,
    });
    /* FIXME: types.then(([uri, content]) => lang.addExtraLib(content, uri)); */
  }
  const input = monaco.editor.create(document.getElementById('input'), {
    language: 'typescript',
    model: monaco.editor.createModel(value, 'typescript', 'ts:worker.ts'),
    value,
    theme,
    minimap: {
      enabled: false
    }
  });
  /*const htmlOutput = monaco.editor.create(document.getElementById('htmlOutput'), {
    language: 'html',
    value: '',
    theme,
    readOnly: true,
    minimap: {
      enabled: false
    }
  });*/
  const statusEl = document.getElementById('status');
  const resultEl = document.getElementById('result');
  const onEdit = () => {
    const body = input.getValue();

    const encoder = new TextEncoder();
    const data = encoder.encode(body);
    crypto.subtle.digest('SHA-256', data).then(hash => {
      const hex = Array.from(new Uint8Array(hash), chunk => chunk.toString(16).padStart(2, '0')).join('');
      statusEl.textContent = `SHA256: ${hex}`;
    });
  };
  input.onDidChangeModelContent(onEdit);
  const model = input.getModel();
  model.setValue(input.getValue() + "\n");
});
</script>
<output id=status class="block text-xs opacity-50"></output>
<div class="flex">
  <output id=result class="block text-xs">
    <div class="text-red-500"><slot name=error></slot></div>
    <div>esbuild: <slot name=esbuildMs></slot> into a <slot name=esbuildBytes></slot></div>
  </output>
  <div id="clientResult" class="ml-auto text-xs"><slot name=reactRenderDuration></slot></div>
</div>
<div class="flex-container" id="container" style="display: flex; min-height: 100vh;">
  <div id="input" style="flex: 1;"></div>
  <div class="flex-1 flex flex-col">
    <div id="clientApp" style="flex: 1;" class="bg-white text-black"></div>
    <div id="htmlOutput" style="flex: 1;"></div>
  </div>
</div>
