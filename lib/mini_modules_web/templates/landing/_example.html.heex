<h2>Use constants:</h2>
<pre><code class="hljs language-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> pi = <span class="hljs-number">3.14159265</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> dateFormat = <span class="hljs-string">&quot;YYYY/MM/DD&quot;</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> isEnabled = <span class="hljs-literal">true</span>;
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> flavors = [<span class="hljs-string">&quot;vanilla&quot;</span>, <span class="hljs-string">&quot;chocolate&quot;</span>, <span class="hljs-string">&quot;caramel&quot;</span>, <span class="hljs-string">&quot;raspberry&quot;</span>];
</code></pre>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;pi&quot;</span>: <span class="hljs-number">3.14159265</span>,
  <span class="hljs-attr">&quot;dateFormat&quot;</span>: <span class="hljs-string">&quot;YYYY/MM/DD&quot;</span>,
  <span class="hljs-attr">&quot;isEnabled&quot;</span>: <span class="hljs-literal">true</span>,
  <span class="hljs-attr">&quot;flavors&quot;</span>: [
    <span class="hljs-string">&quot;vanilla&quot;</span>,
    <span class="hljs-string">&quot;chocolate&quot;</span>,
    <span class="hljs-string">&quot;caramel&quot;</span>,
    <span class="hljs-string">&quot;raspberry&quot;</span>
  ]
}
</code></pre>
<h2>Build URLs:</h2>
<pre><code class="hljs language-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> homeURL = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;https://example.org/&quot;</span>);
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> aboutURL = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;/about&quot;</span>, homeURL);
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> blogURL = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;/blog/&quot;</span>, homeURL);
<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> firstArticle = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;./first-article&quot;</span>, blogURL);
</code></pre>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;homeURL&quot;</span>: <span class="hljs-string">&quot;https://example.org/&quot;</span>,
  <span class="hljs-attr">&quot;aboutURL&quot;</span>: <span class="hljs-string">&quot;https://example.org/about&quot;</span>,
  <span class="hljs-attr">&quot;blogURL&quot;</span>: <span class="hljs-string">&quot;https://example.org/blog/&quot;</span>,
  <span class="hljs-attr">&quot;firstArticle&quot;</span>: <span class="hljs-string">&quot;https://example.org/blog/first-article&quot;</span>
}
</code></pre>
<h2>Import modules:</h2>
<pre><code class="hljs language-js"><span class="hljs-keyword">import</span> { pi, homeURL } <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;https://gist.github.com/BurntCaramel/d9d2ca7ed6f056632696709a2ae3c413/raw&quot;</span>;
<span class="hljs-keyword">export</span> { pi };
<span class="hljs-keyword">export</span> { homeURL };
</code></pre>
<pre><code class="hljs language-json">{
  <span class="hljs-attr">&quot;pi&quot;</span>: <span class="hljs-number">3.14159265</span>,
  <span class="hljs-attr">&quot;homeURL&quot;</span>: <span class="hljs-string">&quot;https://example.org/&quot;</span>
}
</code></pre>
<h2>Declare state machines:</h2>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ConfirmationDialog</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">Closed</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">yield</span> on(<span class="hljs-string">&#x27;open&#x27;</span>, Open);
  }
  <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">Open</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">yield</span> on(<span class="hljs-string">&#x27;cancel&#x27;</span>, Closed);
    <span class="hljs-keyword">yield</span> on(<span class="hljs-string">&#x27;confirm&#x27;</span>, Confirmed);
  }
  <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">Confirmed</span>(<span class="hljs-params"></span>) </span>{}

  <span class="hljs-keyword">return</span> Closed;
}
</code></pre>
<p>Create <a href="/yieldmachine">your own state machine</a>.</p>
<h2>Declare parsers:</h2>
<pre><code class="hljs language-js"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">Digit</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> [digit] = <span class="hljs-keyword">yield</span> /^\d+/;
  <span class="hljs-keyword">return</span> digit;
}

<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">IPAddress</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">const</span> first = <span class="hljs-keyword">yield</span> Digit;
  <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;.&quot;</span>;
  <span class="hljs-keyword">const</span> second = <span class="hljs-keyword">yield</span> Digit;
  <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;.&quot;</span>;
  <span class="hljs-keyword">const</span> third = <span class="hljs-keyword">yield</span> Digit;
  <span class="hljs-keyword">yield</span> <span class="hljs-string">&quot;.&quot;</span>;
  <span class="hljs-keyword">const</span> fourth = <span class="hljs-keyword">yield</span> Digit;
  <span class="hljs-keyword">yield</span> mustEnd;
  <span class="hljs-keyword">return</span> [first, second, third, fourth];
}
</code></pre>
<p>Create <a href="/yieldparser">your own parser</a>.</p>
